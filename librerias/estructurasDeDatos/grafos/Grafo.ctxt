#BlueJ class context
comment0.params=
comment0.target=int\ numVertices()
comment0.text=\ Devuelve\ el\ numero\ de\ vertices\ del\ grafo\r\n\ @return\ int\ numero\ de\ vertices\ del\ grafo\r\n
comment1.params=
comment1.target=int\ numAristas()
comment1.text=\ Devuelve\ el\ numero\ de\ aristas\ del\ grafo\r\n\ @return\ int\ numero\ de\ aristas\ del\ grafo\r\n
comment10.params=visitado
comment10.target=boolean\ allVisited(int[])
comment10.text=Ciclo\ Hamiltoniano\ [COMPLETAR]*
comment11.params=visitado
comment11.target=int[]\ fillAdy(int[])
comment12.params=v0
comment12.target=boolean\ hamiltCycle(int)
comment13.params=vAct\ v0\ visitado\ res
comment13.target=boolean\ hamiltCycle(int,\ int,\ int[],\ int[])
comment14.params=
comment14.target=int[]\ toArrayBFS()
comment14.text=\ Devuelve\ un\ array\ con\ los\ vertices\ (int)\ de\ un\ grafo\ en\ orden\ BFS\r\n\ \ @return\ int[]\ Array\ con\ los\ vertices\ recorridos\ de\ un\ grafo\ en\ orden\ BFS\r\n
comment15.params=origen\ res
comment15.target=int[]\ toArrayBFS(int,\ int[])
comment2.params=i\ j
comment2.target=boolean\ existeArista(int,\ int)
comment2.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\r\n\ @param\ i\ \ \ \ Vertice\ origen\r\n\ @param\ j\ \ \ \ Vertice\ destino\r\n\ @return\ boolean\ true\ si\ (i,j)\ est\uFFFD\ en\ el\ grafo\ y\ false\ en\ caso\ contrario\r\n
comment3.params=i\ j
comment3.target=double\ pesoArista(int,\ int)
comment3.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ 0\ si\ dicha\ arista\ \r\n\ no\ esta\ en\ el\ grafo.\r\n\ @param\ i\ \ \ \ Vertice\ origen\r\n\ @param\ j\ \ \ \ Vertice\ destino\r\n\ @return\ double\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\r\n
comment4.params=i\ j
comment4.target=void\ insertarArista(int,\ int)
comment4.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ no\ Ponderado.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n
comment5.params=i\ j\ p
comment5.target=void\ insertarArista(int,\ int,\ double)
comment5.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado.\r\n\ @param\ i\ \ \ \ Vertice\ origen\r\n\ @param\ j\ \ \ \ Vertice\ destino\r\n\ @param\ p\ \ \ \ Peso\ de\ la\ arista\ (i,j)\r\n
comment6.params=i
comment6.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment6.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ los\ adyacentes\ al\ vertice\ i\ de\ un\ grafo.\r\n\ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\r\n\ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\ Devuelve\ un\ String\ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\ adyacentes,\ en\ orden\ de\ insercion\ \r\n\ @return\ \ String\ que\ representa\ a\ un\ grafo\r\n
comment8.params=
comment8.target=int[]\ toArrayDFS()
comment8.text=\ Devuelve\ un\ array\ con\ los\ vertices\ (int)\ de\ un\ grafo\ en\ orden\ DFS\r\n\ \ @return\ int[]\ Array\ con\ los\ vertices\ recorridos\ de\ un\ grafo\ en\ orden\ DFS\r\n
comment9.params=origen\ res
comment9.target=int[]\ toArrayDFS(int,\ int[])
numComments=16
